# encoding=utf-8
# 尝试计算个人BPW
import matplotlib.pyplot as plt
from pylab import *                                 
import pandas as pd
import os
import math
path = os.getcwd()+'\\deathrate.csv'
f = open(path, encoding='utf-8')
data = pd.read_csv(f)

datalist = data.values.tolist()
# 固定参数

# gip:我国基本养老金的年增长率
gip = 0.07

# giw:个人工资年增长率
giw = 0.07
# giW:城镇工资年增长率
giW = 0.07
# cn:第n年职工的缴费比例，全部设定为8%
cn = 0.08

# ri:第i年的利率，即贴现率,全部设定为3%
ri = 0.03

# t:参保年龄，或者说参加工作年龄

# m:缴纳保险的年数

# T：参保后最大生存年数:80
T = 80

# nPt、qt+n:生存概率和死亡概率的设定
# nPt:t岁的职工在t+n岁时仍然存活的概率
alive_table = [
    [1,0.999703,0.999389093,0.999056297,0.998702631,0.998324122,0.997917805,0.997480717,0.997009906,0.996502428,
    0.995955348,0.995365742,0.994729703,0.99404334,0.993301784,0.992499196,0.991627782,0.990680777,0.989649478,0.988523257,
    0.987292546,0.985945879,0.984470904,0.982855387,0.981088213,0.979158412,0.97705518,0.974768871,0.972289059,0.969606514,
    0.966712238,0.963598458,0.960255735,0.956673021,0.952832935,0.948713838,0.944292832,0.939539262,0.934420652,0.92889916,
    0.92293377,0.916484309,0.909509863,0.901968207,0.893809003,0.884962975,0.875327498,0.864753542,0.853036132,0.839910465,
    0.825055808,0.808109987,0.788701609,0.766490195,0.741212881,0.712722882,0.681012415,0.646222215,0.60862953,0.56862918,
    0.526704719,0.483397477,0.439292775,0.394968134,0.350999886,0.307964492,0.266429321,0.226941298,0.190008418,0.156079375,
    0.125520126,0.098596184,0.07546059,0.056129096,0.040467675,0.028201113,0.018939839,0.012219928,0.007548726,0.004448389,
    0.002490715
],
    
    [1.000000000,0.999856,0.999707021,0.999553067,0.999393138,0.999226239,0.999051375,0.998865551,0.998667776,0.99845506,
    0.998224417,0.997971866,0.997695428,0.99739113,0.99705501,0.996684105,0.996275465,0.995827141,0.995335202,0.994797721,
    0.994211785,0.99357549,0.992886942,0.992142277,0.991337649,0.990468246,0.989527301,0.988507099,0.987399971,0.98619633,
    0.984885675,0.983457591,0.981898811,0.980194234,0.978326964,0.976275413,0.974015335,0.971520882,0.968765649,0.965726631,
    0.962377491,0.958686773,0.95460852,0.950083675,0.945046332,0.939429921 ,0.933173318,0.926211845,0.918460378,0.909793786,
    0.900031699,0.888932508,0.876207439,0.861544984,0.844642333 ,0.825240054,0.803148377,0.778259612,0.750555127,0.720100602,
    0.687037183,0.651575071,0.614014375,0.574665878,0.533897931,0.492125223,0.449800977,0.407407685,0.365443879,0.324411475,
    0.284797914,0.247050798,0.211535517,0.178540418,0.148291922,0.120961573,0.096668134,0.075474419,0.057380408,0.042315928,
    0.030134907]

]
def get_aliverate( t, n , sex):
    # t+n岁的活人 / t岁的活人
    return alive_table[sex][n]

# qt+n:t+n岁的职工在未来一年内发生死亡的概率
death_table = [
    [0.000297,0.000313907,0.000332797,0.000353666,0.000378508,0.000406318,0.000437088,0.000470811,0.000507478,0.00054708,
    0.000589606,0.000636039,0.000686363,0.000741556,0.000802588,0.000871414,0.000947005,0.001031299,0.001126221,0.001230711,
    0.001346667,0.001474975,0.001615517,0.001767174,0.001929801,0.002103232,0.002286309,0.002479812,0.002682546,0.002894275,0.00311378,
    0.003342723,0.003582714,0.003840086,0.004119097,0.004421006,0.00475357,0.00511861,0.005521492,0.00596539,0.006449461,0.006974446,
    0.007541656,0.008159204,0.008846028,0.009635477,0.010573956,0.01171741,0.013125667,0.014854656,0.016945821,0.019408378,0.022211415,
    0.025277314,0.02849,0.031710466,0.0347902,0.037592685,0.04000035,0.041924461,0.043307242,0.044104702,0.044324641,0.043968248,0.043035394,
    0.041535171,0.039488023,0.036932881,0.033929043,0.030559249,0.026923941,0.023135595,0.019331494,0.015661421,0.012266562,0.009261274,
    0.006719912,0.004671202,0.003100337,0.001957674,0.002490715
]
    ,
    [0.000144,0.000148979,0.000153955,0.000159928,0.000166899,0.000174865,0.000185824,0.000197775,0.000212716,0.000230643,0.000252551,0.000276438,
    0.000304297,0.000336121,0.000370904,0.00040864,0.000448324,0.000491939,0.000537481,0.000585936,0.000636296,0.000688548,0.000744665,0.000804627,
    0.000869403,0.000940945,0.001020203,0.001107128,0.001203641,0.001310655,0.001428084,0.00155878,0.001704576,0.00186727,0.002051552,0.002260078,
    0.002494453,0.002755233,0.003039018,0.00334914,0.003690718,0.004078254,0.004524844,0.005037344,0.00561641,0.006256603,0.006961473,0.007751467,
    0.008666592,0.009762087,0.011099191,0.012725069,0.014662455,0.016902651,0.019402279,0.022091676,0.024888765,0.027704486,0.030454525,0.033063419,
    0.035462111,0.037560697,0.039348497,0.040767947,0.041772708,0.042324246,0.042393292,0.041963806,0.041032404,0.039613561,0.037747115,0.035515282,
    0.032995098,0.030248496,0.02733035,0.024293438,0.021193715,0.018094011,0.01506448,0.012181021,0.030134907
]
]
def get_death_next_year( x, sex ):
    # 27岁死掉的人 / 27岁活着的人
    # x代表职工的年龄
    return death_table[sex][x-25]

# f(t+m)：养老金计发年数，t+m代表退休年龄
f_table = [
    
    195,190,185,180,175,
    174,164,158,152,145,
    139,132,125,117,109,
    101,93,84,75,65,56]
def get_f(x):
    # x代表退休年龄
    return f_table[x-50]/12

# wn:参保后第n年的缴费工资，参数 n 和 收入水平x: 60%、100%、300% 
# w1 = 112886 
# x=（0.6；1；3）
# 增长比率：1.07
def get_wn( n , x ):
    w1 = 112886 * x 
    # i:[1,n-1]
    for i in range(1,n):
        w1 = w1 * (1 + giw)

    return w1

def get_Wn( n ):
    w1 = 112886 
    # i:[1,n-1]
    for i in range(1,n):
        w1 = w1 * (1 + giW)

    return w1

# 缴纳保险年数m,收入水平x: 60%、100%、300%
# pa
def get_pa( m , x ):
    
    Wm = get_Wn(m)
    return m/200 * Wm * (1+x)
# pb
def get_pb( t, m , x ):
    
    res = 0
    # n:[1,m]
    for n in range(1,m+1):
        wn = get_wn(n,x)
        a = 1
        # i:[n+1,m]
        if n != m:
            for i in range(n+1,m+1):
                a = a * (1+ri)
        
        res = res + cn * wn * a
    
    return res / get_f(t+m)

            
# pm:退休后次年的基本养老金
# pm = pa +pb
def get_pm( t, m , x ):
    # 缴纳保险年数m
    # 收入水平x: 60%、100%、300%
    pa = get_pa(m,x)
    pb = get_pb(t, m,x)
    return pa + pb

# NBP
def get_NBP( t,m , x ,sex):
    # t:工作年龄
    # m:缴纳保险的年数
    # x:收入水平
    # sex:性别
    res = 0
    # l:[0 , T-m]
    for l in range(0,T-m+1):
        pm = get_pm(t,m,x)

        a = 1
        if l != 0 :
            for i in range(1,l+1):
                a = a * ( 1 + gip )
        
        b = 1
        if ( m + l ) != 0 :
            for i in range( 1, m+l+1 ):
                b = b / (1+ri) 
        
        res = res + pm*a*b* get_aliverate( t, m+l ,sex)
    
    return res

# NC
def get_NC( t,m , x ,sex):
    # t:工作年龄
    # m:缴纳保险的年数
    # x:收入水平
    # sex:性别
    res = 0
    # n:[1,m]
    for n in range( 1 , m+1 ):
        wn = get_wn(n,x)
        a = 1
        if (n-1) != 0:
            for i in range(1,n):
                a = a / (1+ri) 
        res =  res + cn * wn * a * get_aliverate(t,n,sex)
    return res

# NDP
def get_pk(t,m,x,sex, k):
    res = 0
    # n:[1,k]
    for n in range(1,k+1):
        wn = get_wn(n,x)
        a = 1
        if (n-1) != 0:
            # i:[1,n-1]
            for i in range(1,n):
                a = a / (1+ri) 
        
        res =  res + cn * wn * a * get_aliverate(t,k,sex) * get_death_next_year(t+k,sex)
    return res

def get_pms(t,m,x,sex,s):

    C = get_NC(t,m,x,sex)

    sum = 0
    pb = get_pb(t,m,x)
    # n:[m,m+s]
    for n in range(m,m+s+1):

        a = 1
        if (n-m) != 0:
            # i:[1,n-m]
            for i in range(1,n-m+1):
                a = a * ( 1 + gip )
        
        b = 1
        if n != 0:
            # i:[1,n]
            for i in range(1,n+1):
                b = b / (1+ri)
        
        sum = sum + pb * a * b
    

    return ( C - sum ) * get_aliverate(t,m+s,sex) * get_death_next_year(t+m+s,sex) 


def get_NDP( t,m , x ,sex):
    # t:工作年龄
    # m:缴纳保险的年数
    # x:收入水平
    # sex:性别

    sum1 = 0
    # k:[1,m-1]
    for k in range(1,m):
        sum1 = sum1 + get_pk(t,m,x,sex,k)
    
    sum2 = 0
    Q = math.floor( get_f(t+m) - 1 )
    # s:[0,Q]
    for s in range(0,Q+1):
        sum2 = sum2 + get_pms(t,m,x,sex,s)
    
    return sum1 + sum2



# NPW = NBP + NDP - NC
def get_NPW( t,m , x ,sex):
    # t:工作年龄
    # m:缴纳保险的年数
    # x:收入水平
    # sex:性别
    return get_NBP(t, m , x ,sex) + get_NDP(t,m , x ,sex) - get_NC(t,m , x ,sex)





print(get_aliverate(25,1,1))
print(get_wn(2,1))
print(get_NPW(25,15,0.6,1))


mpl.rcParams['font.sans-serif'] = ['SimHei']

names = ['50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70']
x = range(len(names))
y = []
y1=[]
for m in range(25,46):
    y.append( get_NPW(25 ,m ,1 , 0)/100000 )
    y1.append( get_NPW(25, m ,1, 1)/100000 )


#plt.plot(x, y, 'ro-')
#plt.plot(x, y1, 'bo-')
plt.xlim(-1, 27)  # 限定横轴的范围
plt.ylim(100, 300)  # 限定纵轴的范围
plt.ticklabel_format(style='plain')
plt.plot(x, y, marker='.', mec='r', mfc='w',label=u'男职工')
plt.plot(x, y1, marker='.', ms=10,label=u'女职工')
plt.legend()  # 让图例生效
plt.xticks(x, names, rotation=45)
plt.margins(0)
plt.subplots_adjust(bottom=0.15)
plt.xlabel(u"退休年龄") #X轴标签
plt.ylabel("NPW") #Y轴标签
plt.title("中养老金增长率下25岁参保男女职工养老金财富随退休年龄变化趋势") #标题

plt.show()
